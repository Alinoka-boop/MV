#include <locale>
#include <iostream>
#include<math.h>
#include <iomanip> 
using namespace std;
const int n = 3;
int i, j, m, k;
double aa, bb;

double a[n][n + 1] =
{ { 3.01, -0.14, -0.15, 1 },   //матрица коэффициентов, где последний столбец - правая часть системы
{ 1.11, 0.13, -0.75, 0.13 },
{ 0.17, -2.11, 0.71, 0.17 },
};

void main()
{
	setlocale(LC_ALL, "Russian");
	for (int i = 0; i <n; i++) {
		for (int j = 0; j<(n + 1); j++)
		{
			cout << a[i][j] << ' ';
		}
		cout << endl;
	}
	cout << endl;
	double* x;
	x = (double *)malloc(n * sizeof(double));

	for (k = 0; k < n; k++) //Поиск максимального элемента в первом столбце
	{
		aa = abs(a[k][k]);
		i = k;
		for (m = k + 1; m < n; m++)
			if (abs(a[m][k]) > aa)
			{
				i = m;
				aa = abs(a[m][k]);
			}

		if (aa == 0)   //проверка строку
		{
			cout << "Система не имеет решений" << endl;
		}

		if (i != k)  //  перестановка i-ой строки, содержащей главный элемент k-ой строки
		{
			for (j = k; j < n + 1; j++)
			{
				bb = a[k][j];
				a[k][j] = a[i][j];
				a[i][j] = bb;
			}
		}
		for (int i = 0; i <n; i++) {
			for (int j = 0; j<(n + 1); j++)
			{
				cout << a[i][j] << ' ';
			}
			cout << endl;
		}
		cout << endl;
		aa = a[k][k];//преобразование k-ой строки (Вычисление масштабирующих множителей(В методе Гаусса для вычисления масштабирующих множителей требуется делить на ведущие элементы каждого шага.
					 //Если элемент равен нулю или близок к нулю,то возможен неконтролируемый рост погрешности))
		a[k][k] = 1;
		for (j = k + 1; j < n + 1; j++)
			a[k][j] = a[k][j] / aa;
		for (i = k + 1; i < n; i++)//преобразование строк с помощью k-ой строки
		{
			bb = a[i][k];
			a[i][k] = 0;
			if (bb != 0)
				for (j = k + 1; j < n + 1; j++)
					a[i][j] = a[i][j] - bb * a[k][j];
		}
	}

	for (i = n - 1; i >= 0; i--)   //Нахождение решений СЛАУ(суть которого заключена в том, 
		//чтобы на каждом шаге в качестве главной переменной выбирать ту, при которой среди оставшихся
		//после вычёркивания очередных строк и столбцов стоит максимальный по модулю коэффициент
	{
		x[i] = 0;
		aa = a[i][n];
		for (j = n; j > i; j--)
			aa = aa - a[i][j] * x[j];
		x[i] = aa;
	}

	cout << "Решение системы:" << endl;  //вывод решений
	for (i = 0; i < n; i++)
	{
		cout << "x[" << i + 1 << "]=" << setprecision(3) << x[i] << endl;

	}
	system("PAUSE");
}